pipeline {
    agent any

    environment {
        PM_API_TOKEN_ID = credentials('pm-api-token-id')
        PM_API_TOKEN_SECRET = credentials('pm-api-token-secret')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        JENKINS_PUB_KEY = credentials('jenkins-pub-key')
        JENKINS_PRIV_KEY = credentials('jenkins-priv-key')
    }

    parameters {
        choice(
            name: 'CREATE_OR_DESTROY',
            choices: ['Create', 'Destroy'],
            description: 'Would you like to create or destroy the Kubernetes cluster?'
        )
    }

    stages {
        stage('authentication') {
            agent {
                docker {
                    image 'alpine'
                    args '--entrypoint=""'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-priv-key', keyFileVariable: 'JENKINS_PRIV_KEY_FILE')]) {
                        sh '''
                            cp "$JENKINS_PRIV_KEY_FILE" id_rsa
                            echo "$JENKINS_PUB_KEY" > id_rsa.pub
                            chmod 600 id_rsa
                        '''
                    }
                }
            }
        }

        stage('init') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.12.2'
                    args '--entrypoint=""'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    sh 'terraform init -no-color'
                }
            }
        }

        stage('plan') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.12.2'
                    args '--entrypoint=""'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    sh 'terraform plan -no-color'
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('apply') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.12.2'
                    args '--entrypoint=""'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    sh 'terraform apply -no-color -auto-approve'
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('kubespray-init') {
            agent {
                docker {
                    image 'quay.io/kubespray/kubespray:v2.28.0'
                    args '--entrypoint="" -u root'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    sh '''
                        export ANSIBLE_ROLES_PATH="$ANSIBLE_ROLES_PATH:/kubespray/roles"
                        export ANSIBLE_HOST_KEY_CHECKING="False"

                        ansible-playbook \
                          --become \
                          --inventory inventory.ini \
                          --forks=1 \
                          --limit=srv-master-k8s-0 \
                          --extra-vars '{"kube_network_plugin":"flannel","download_run_once":false,"download_localhost":false,"container_manager":"docker"}' \
                          --private-key id_rsa \
                          /kubespray/cluster.yml
                    '''
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('kubespray-join') {
            agent {
                docker {
                    image 'quay.io/kubespray/kubespray:v2.28.0'
                    args '--entrypoint="" -u root'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    sh '''
                        export ANSIBLE_ROLES_PATH="$ANSIBLE_ROLES_PATH:/kubespray/roles"
                        export ANSIBLE_HOST_KEY_CHECKING="False"

                        ansible-playbook \
                          --become \
                          --inventory inventory.ini \
                          --forks=5 \
                          --limit="all:!srv-master-k8s-0" \
                          --extra-vars '{"kube_network_plugin":"flannel","download_run_once":false,"download_localhost":false,"container_manager":"docker"}' \
                          --private-key id_rsa \
                          /kubespray/cluster.yml
                    '''
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Create'
                }
            }
        }

        stage('destroy') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.12.2'
                    args '--entrypoint=""'
                }
            }
            steps {
                dir('cluster-k8s/terraform') {
                    sh 'terraform apply -destroy -no-color -auto-approve'
                }
            }
            when {
                expression {
                    params.CREATE_OR_DESTROY == 'Destroy'
                }
            }
        }
    }
}
